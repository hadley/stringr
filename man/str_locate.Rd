% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/locate.r
\name{str_locate}
\alias{str_locate}
\alias{str_locate_all}
\title{Find location of a match with in a string}
\usage{
str_locate(string, pattern)

str_locate_all(string, pattern)
}
\arguments{
\item{string}{Input vector. Either a character vector, or something
coercible to one.}

\item{pattern}{Pattern to look for.

The default interpretation is a regular expression, as described
\code{vignette("regular-expressions")}. Control options with \code{\link[=regex]{regex()}}.

Match a fixed string (i.e. by comparing only bytes), using
\code{\link[=fixed]{fixed()}}. This is fast, but approximate. Generally,
for matching human text, you'll want \code{\link[=coll]{coll()}} which
respects character matching rules for the specified locale.

Match character, word, line and sentence boundaries with
\code{\link[=boundary]{boundary()}}. An empty pattern, "", is equivalent to
\code{boundary("character")}.}
}
\value{
\code{str_locate()} returns an integer matrix with two columns and
one row for each element of \code{string}. The first column, \code{start},
gives the position at the start of the match, and second column, \code{end},
gives the position of the end.

\code{str_locate_all()} returns a list of integer matrices as above, but
the matrices have one row for each match in the corresponding element
in \code{string}.
}
\description{
Vectorised over \code{string} and \code{pattern}. If the match is of length
0, (e.g. from a special match like \code{$}) end will be one character less
than start.
}
\examples{
fruit <- c("apple", "banana", "pear", "pineapple")
str_locate(fruit, "$")
str_locate(fruit, "a")
str_locate(fruit, "e")
str_locate(fruit, c("a", "b", "p", "p"))

str_locate_all(fruit, "a")
str_locate_all(fruit, "e")
str_locate_all(fruit, c("a", "b", "p", "p"))

# Find location of every character
str_locate_all(fruit, "")
}
\seealso{
\code{\link[=str_extract]{str_extract()}} for a convenient way of extracting matches,
\code{\link[stringi:stri_locate]{stringi::stri_locate()}} for the underlying implementation.
}
